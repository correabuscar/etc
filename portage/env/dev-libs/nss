#!/bin/bash
#src: https://wiki.gentoo.org/wiki/Certificates#Modifying_CA_trusts
# Execute this logic after the installation of dev-libs/nss
post_pkg_postinst() {
  #well but this is for dev-libs/nss so it has to use certutil

  #Link in the hard-coded list, and then modify the trust bits for the certificate that needs modifying:
  local GLOBAL_NSS_DB="/etc/pki/nssdb"
  local RELATIVE_TO_DIR="/usr/share/ca-certificates"
  local SELECTED_CERTS="/etc/custom-ca-certificates.conf"
  #note: ^ this file didn't exist before, for me! therefore fk it, deleting it each time
  rm -r -v -- "$GLOBAL_NSS_DB"
  mkdir -p -- "$GLOBAL_NSS_DB"
  mapfile -t certfiles < <( grep -v '^\s*#' -- "${SELECTED_CERTS}" )

  local PWGEN="/usr/bin/pwgen"
  if ! test -x "$PWGEN"; then
    echo "$PWGEN doesn't exist"
    exit 11
  fi
  local CUR_PWD="$($PWGEN -s 128|head -1)"
  test -n "$CUR_PWD"
  #create new db (not really needed as -A does that already, but just in case we got no certs tho!)
  #sets a random password to avoid being asked and to avoid using premade password
  #if pwgen isn't found it will err out like `password file contains no data`, however exit code is still 0, weirdly!
  # -f file is taking the one line pwd from that file, which here is the output of pwgen|head
  # pwd is used for private keys which we won't be using at all! so it doesn't matter which pwd it is. Well, looks like it's needed even when adding a cert to trust.
  set -e
  certutil -N -d "sql:${GLOBAL_NSS_DB}" -f <(echo -n "$CUR_PWD")
  #needs +r perms for others, else only root can read it! This might be why a bunch of my tries just defaulted to hardcoded certs, like firefox!
  chmod -vR a+r -- "${GLOBAL_NSS_DB}"
  set +e


  set -e
  #show the modules:
  certutil -U -d "sql:${GLOBAL_NSS_DB}"
  #show the certs:
  certutil -L -d "sql:${GLOBAL_NSS_DB}"

  #The hardcoded certs will next be marked as untrusted (trusted for none):
  #as per: https://wiki.gentoo.org/wiki/Certificates#NSS-based_modifications
  #must've already existed, else catch possible rename?
  test -f "/usr/lib64/libnssckbi.so"
  #this makes a symlink(located in dir "$GLOBAL_NSS_DB") to that .so
  #ln [OPTION]... TARGET... DIRECTORY
  #ln -sf "/usr/lib64/libnssckbi.so" "$GLOBAL_NSS_DB"
  #ln [OPTION]... -t DIRECTORY TARGET...
  #  -t, --target-directory=DIRECTORY  specify the DIRECTORY in which to create the links
  ln -vsf -t "$GLOBAL_NSS_DB" "/usr/lib64/libnssckbi.so"
  #Ok, doing that, adds another module:
  #    slot: NSS Builtin Objects
  #   token: Builtin Object Token
  #     uri: pkcs11:token=Builtin%20Object%20Token;manufacturer=Mozilla%20Foundation;serial=1;model=1
  #show the modules:
  certutil -U -d "sql:${GLOBAL_NSS_DB}"
  #show the hardcoded certs:
  echo "These are the by-default hardcoded certs:"
  certutil -L -d "sql:${GLOBAL_NSS_DB}" -h "Builtin Object Token"
  #this removes the trust bits from the output, keeps only the prefix and certname
  mapfile -t hardcoded_certs < <(
    certutil -L -d "sql:${GLOBAL_NSS_DB}" -h "Builtin Object Token" |
      awk '/^Builtin Object Token:/ {sub(/ [[:space:]]*[a-zA-Z,]+[[:space:]]*$/, ""); print}'
  )
  for hardcoded_cert in "${hardcoded_certs[@]}"; do
    #remove any trust bits so it's untrusted; well, it's trusted for nothing.
    echo "Removing trust from hardcoded cert: $hardcoded_cert"
    certutil -M -d "sql:${GLOBAL_NSS_DB}" -f <(echo -n "$CUR_PWD") -n "$hardcoded_cert" -t ",,"
  done

  #tried to remove it, but firefox still sees the hardcoded ones, even if I delete the files({cert9.db,key4.db,pkcs11.txt}) from firefox profile dir
  set -e
  rm --one-file-system -v -- "${GLOBAL_NSS_DB}/libnssckbi.so"
  set +e

  set +e
  #only trusted ones are marked as trusted for ssl from that /etc/custom-ca-certificates.conf file (see above)
  for file in "${certfiles[@]}"; do
    local fname="${RELATIVE_TO_DIR}/${file}"
    echo "Trusting CA cert: $fname"
    #In the context of certutil command from NSS (Network Security Services), the option -t "C,," specifies trust attributes for a certificate. Hereâ€™s what C,, signifies:
    #    C: This stands for "trusted for SSL" (Secure Sockets Layer). When a certificate is marked with C, it means it is trusted for establishing secure connections over HTTPS or other SSL/TLS protocols. Clients like web browsers use this trust attribute to verify the authenticity of servers during SSL/TLS handshakes.
    #    ,,: The two commas following C indicate that the certificate is not trusted for email (S/MIME) or code signing purposes. This means the certificate is trusted only for SSL/TLS, and not for signing emails or executable code.
    set -e
    certutil -d "sql:${GLOBAL_NSS_DB}" -f <(echo -n "$CUR_PWD") -A -t "C,," -n "$fname" -i "$fname"
    set +e
  done

  set -e
  echo "These are the modified hardcoded certs to not be trusted plus whatever u did trust before:"
  certutil -L -d "sql:${GLOBAL_NSS_DB}"
  set +e
}
