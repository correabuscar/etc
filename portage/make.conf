# These settings were set by the catalyst build script that automatically
# built this stage.
# Please consult /usr/share/portage/config/make.conf.example for a more
# detailed example.
COMMON_NATIVE_FLAGS="-march=native"
COMMON_NATIVE_RUSTFLAGS="-C target-cpu=native" #bad on z575 due to selecting "generic"! unknown what it selects on i87k due to "rustc --print target-cpus" showing "Target CPU help is not supported by this LLVM version."  ok, native on i87k is skylake, correctly!!
#source /etc/portage/make.conf.nativeflags.Z575.conf
source /etc/portage/make.conf.nativeflags.i87k.conf
COMMON_RUSTFLAGS="${COMMON_NATIVE_RUSTFLAGS} " #TODO: add these two -Z flags without impeding stage0 rustc from building rust! XXX: "-Z treat-err-as-bug=5 -Z macro-backtrace"
#COMMON_RUSTFLAGS="${COMMON_NATIVE_RUSTFLAGS} -Z treat-err-as-bug=5 -Z macro-backtrace" #FIXME: remove this line, it's just temporary# yeah this will make build fail (ah already I've mentioned how below!)
#^ problem when compiling rust-9999 :
#  process didn't exit successfully: `/var/tmp/portage/dev-lang/rust-9999/work/rust-git-src/build/x86_64-unknown-linux-gnu/stage0/bin/rustc - --crate-name ___ --print=file-names -C target-cpu=skylake-avx512 -Z treat-err-as-bug=5 -Z external-macro-backtrace -Lnative=/usr/lib/llvm/11/lib64 -Cdebuginfo=2 -C linker=x86_64-pc-linux-gnu-gcc -Wrust_2018_idioms -Wunused_lifetimes --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=cfg` (exit code: 1)
#  --- stderr
#  error: the option `Z` is only accepted on the nightly compiler
#XXX: trying to set cargo= and rustc= in config.toml of /var/db/repos/localrepo/dev-lang/rust/rust-9999.ebuild  to work around this!
#XXX: -Z external-macro-backtrace was renamed to -Z macro-backtrace as per PR: https://github.com/rust-lang/rust/pull/67359 also https://github.com/rust-lang/rust/issues/49535#issuecomment-653899181
#for RUSTFLAGS_STAGE_NOT_0 and RUSTFLAGS_STAGE_0, RUSTFLAGS_STAGE_1, RUSTFLAGS_STAGE_2 (when compiling rust) see also: https://github.com/rust-lang/rust/pull/47836/files and doc: https://github.com/rust-lang/rustc-dev-guide/pull/728/files

#FIXME: configure: CFLAGS note: CFLAGS should only be used to specify C compiler flags, not macro definitions. Use CPPFLAGS for: -D_FORTIFY_SOURCE=2   (that's from curl's ./configure)

COMMON_FLAGS="${COMMON_NATIVE_FLAGS} -O2 -pipe -frecord-gcc-switches -ggdb -fvar-tracking-assignments -fno-omit-frame-pointer -ftrack-macro-expansion=2 -fstack-protector-all -Wno-trigraphs -fno-schedule-insns2 -fno-delete-null-pointer-checks -D_FORTIFY_SOURCE=2 -rdynamic -flifetime-dse=1"
#-flifetime-dse=1 added from https://bugs.gentoo.org/751787#c25  unsure if it'll cause any trouble!
#XXX: for increased gdb stacktraces try -Og and this is a must: -fno-omit-frame-pointer  (also FEATURES=nostrip , or =splitdebug instead); otherwise, for speed: -O2 and -fomit-frame-pointer ! as per: https://wiki.gentoo.org/wiki/Project:Quality_Assurance/Backtraces#Compiler_flags
#-rdynamic so that programs can dump stacktraces at will at runtime, see: /home/user/sandbox/c/backtrace                                                    
# -DQT_FORCE_ASSERTS" ## -DQT_FORCE_ASSERTS https://bugzilla.kernel.org/show_bug.cgi?id=204277#c12
#XXX: Always use -D_FORTIFY_SOURCE=2 reason: for fopen() with O_CREAT and no 3rd arg(aka mode) you will get a compile-time error because you always need a mode arg when using O_CREAT and O_TMPFILE!
#-fPIC
# -Werror=misleading-indentation -ftrack-macro-expansion=0"
#CFLAGS="${COMMON_FLAGS}"
#CXXFLAGS="${COMMON_FLAGS}"
FCFLAGS="${COMMON_FLAGS}"
FFLAGS="${COMMON_FLAGS}"
#TODO: wtf are those two for?

#CFLAGS="-O2 -pipe"
#gentoo normal: CFLAGS="-O2 -pipe -march=native -ggdb -fvar-tracking-assignments -fno-omit-frame-pointer -ftrack-macro-expansion=2"
#gentoo hardened:
#this was LAST(with hardened, 2015 dec 27th): 
#CFLAGS="-O2 -pipe -march=native -ggdb -fvar-tracking-assignments -fno-omit-frame-pointer -ftrack-macro-expansion=2 -fstack-protector-all -fPIC"
#this is for non-hardened, normal, without any debugging info eg. -ggdb; 2015 dec 27th:
#XXX: current:
CFLAGS="${COMMON_FLAGS}"
# -O2 -pipe -march=native" # -g0 -fno-var-tracking-assignments -fomit-frame-pointer -ftrack-macro-expansion=0" # -fno-stack-protector" # -fPIC"
#-ftrack-macro-expansion=0 makes sys-libs/libblockdev fail epically: ` error: this 'else' clause does not guard... [-Werror=misleading-indentation]`
#workaround for compiling rust with clang (no effect unless recompiling clang and/or llvm with these):
#CFLAGS="-O2 -pipe -march=native -ggdb -fno-omit-frame-pointer -fstack-protector-all -fPIC"
#CFLAGS="-O2 -pipe -march=native -ggdb -fvar-tracking-assignments -fno-omit-frame-pointer -ftrack-macro-expansion=2 -Wstack-protector -fstack-protector-all"
CXXFLAGS="${CFLAGS}"

#Added by me(this CPPFLAGS var was not added or set by default), might not be needed or sensed:  it interferes(hence why it's now commented out!) with glibc build by appending -D_FORTIFY_SOURCE=2 (and others) after the -U_FORTIFY_SOURCE and thus causes: ../misc/syslog.c:121:30: error: inlining failed in call to always_inline ‘syslog’: function not inlinable
#CPPFLAGS="${CFLAGS}"

RUSTFLAGS="$COMMON_RUSTFLAGS"

#LDFLAGS added by me(28nov2020) from archlinux /etc/makepkg.conf:
LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro"
#without this ^ it's: LDFLAGS="-Wl,-O1 -Wl,--as-needed"
#XXX: "To be sure to not strip binaries, you must also be sure you don't have the -s flag set in your LDFLAGS." src: https://wiki.gentoo.org/wiki/Project:Quality_Assurance/Backtraces#Stripping

# WARNING: Changing your CHOST is not something that should be done lightly.
# Please consult http://www.gentoo.org/doc/en/change-chost.xml before changing.
CHOST="x86_64-pc-linux-gnu"
# These are the USE flags that were used in addition to what is provided by the
# profile used for building.
#USE="bindist mmx sse sse2"
#XXX: disabled 'bindist' because we don't plan on having binaries distributed!
#(3 jan 2016) re-enabled 'bindist'
#(3 jan 2016) globally disabled(the previous enabled): gstreamer -minimal -thunar  (SHIT already had gstreamer then later -gstreamer in the same USE, so the latter musta been in effect!)  egl (because -egl works in firefox to enable hwaccel even tho it's slower than without hwaccel! but with egl hwaccel won't work at all - can't remember exactly how(prolly acts as if, it's always no hwaccel - those fps speeds))
#(3 jan 2016) removed firefox-only USE flags from global: -system-cairo system-icu system-jpeg system-libvpx     system-sqlite
#(3 jan 2016) added: -cracklib -nullok (aka no empty passwords allowed)
USE="wayland X bindist btrfs cscope dbus      git gpg gpm gtk3 jpeg lock  mosh-hardening pie   pulseaudio readline session  ssp startup-notification     strong-security  xcomposite -cdr -cgi -cvs -debug -dvdr -emacs     -firmware-loader -fortran -gnome -ipv6 -java -jit -kde -libssp -mudflap -lua     -luajit -lvm1 -mclib -network-cron -nls -nopie -nossp -plymouth     -racket -ruby -samba -static -static-libs -symlink -systemd -tcl     -test unicode -vim-pager -wifi -yahoo -filter_audio -libav elogind -consolekit policykit extensions -gstreamer -gstreamer-0 -egl -gmp-autoupdate -tty-helpers -tcpd lm_sensors opus ogg png smp -cups -xattr -cracklib -nullok -lvm2 -lvm -luks -crypt -cryptsetup source-highlight -udisks rsync-verify qt5 -device-mapper -mount ccache -libav ffmpeg -geoclue -plugin -livecd verify-sig -suid -webkit"
#added 07 june 2021: "-suid" because I don't need it for bwrap or util-linux's mount/umount. Thanks to <dkjii> on #gentoo irc.libera.chat (aka the new freenode!) for helping me figure out that bwrap wasn't in /etc/portage/suidctl.conf ergo it wasn't 'suid' while having USE=suid and thus it would err like "bwrap: setting up uid map: Permission denied", so either USE=-suid for 'bubblewrap' emerge-ing, or have /usr/bin/bwrap in /etc/portage/suidctl.conf so it's allowed to emerge as suid!
#added 08 may 2021: verify-sig ~ Verify upstream signatures on distfiles
#removed -python_targets_python2_7 on 30nov2020
#//added "doc" on 28nov2020; nevermind endless cycle of python requirements!
#XXX USE=debug Debug features that are enabled by the USE flag include assertions, debug logs on screen, debug files, leak detection and extra-safe operations (such as scrubbing memory before use). Some of them might be taxing, especially for complex software or software where performance is an important issue. src: https://wiki.gentoo.org/wiki/Project:Quality_Assurance/Backtraces#Compiler_flags
#XXX: -plugin to not place the plugin for chromium of media-libs/openh264 into /usr/lib64/nsbrowser/plugins/
#USE=ccache is for catalyst !
#XXX: using -mount so that lxqt-panel doesn't have to pull udisks which requires libblockdev with cryptsetup USE flag which also pulls in lvm2 !!!!  grub also uses 'mount' flag, not sure for what!

#note: disabled: installsources (due to -ggdb not used) and binpkg-multi-instance and unmerge-backup  (and maybe more, i forgot) and xattr
#disabled(3 jan 2016): parallel-install -skiprocheck -suidctl
#TODO: 2020-april-08 suidctl is apparently used by nothing currently: # equery h suidctl  #* Searching for USE flag suidctl ... (nothing outputted)
#added(3 jan 2016): -network-sandbox-proxy
#parallel-fetch needed, or else it will only fetch at the beginning of the emerge for each package!
FEATURES="assume-digests binpkg-logs binpkg-multi-instance -candy ccache -clean-logs unmerge-orphans -compress-build-logs -compress-index -compressdebug config-protect-if-modified -digest -distcc -distcc-pump distlocks ebuild-locks -fail-clean fakeroot fixlafiles force-mirror -force-prefix getbinpkg -installsources ipc-sandbox -keeptemp -keepwork -lmirror merge-sync -metadata-transfer -mirror multilib-strict network-sandbox -network-sandbox-proxy news -noauto -noclean -nodoc -noinfo -noman -notitles parallel-fetch -parallel-install prelink-checksums preserve-libs -protect-owned sandbox sfperms -sign skiprocheck split-elog split-log strict -stricter suidctl -test -test-fail-continue -unknown-features-filter unknown-features-warn -unmerge-backup unmerge-logs -unmerge-orphans -webrsync-gpg -xattr -usersync -userfetch userpriv usersandbox downgrade-backup buildpkg buildsyspkg -nostrip splitdebug binpkg-dostrip installsources"
#nvmTODO: disabled 'force-mirror' until i place my firewall back (which allows only whitelisted domains!), so re-enable 'force-mirror' then! doesn't seem to have any effect at this time, probably because of -mirror and -lmirror, so placed it back to enabled.
#08oct2023(or earlier): FEATURES variable contains unknown value(s): cgroup
#21 Oct 2022: nvm_patched!//removed FEATURES="force-mirror" because otherwise missing .crate files (like for librsvg package) will 404 if the mirrors don't have them, instead of also trying at the end the crates.io download url directly! eg. # FEATURES=force-mirror GENTOO_MIRRORS='https://distfiles.gentoo.org' emerge -1v librsvg --fetchonly --ask=n   will 404 on multiple crates because they won't be downloaded from crates.io when no mirrors have them. Ok, 'force-mirror' isn't getting the mirror's layout.conf file and thus it uses wrong urls to fetch the crates! ie. Emerge needs to get the layout even when 'force-mirror' is used. https://bugs.gentoo.org/877793
#08feb2022 replaced collision-protect with unmerge-orphans (which is presumably almost identical) as per info on news 2021-10-18-libxcrypt-migration-stable aka /var/db/repos/gentoo/metadata/news/2021-10-18-libxcrypt-migration-stable/2021-10-18-libxcrypt-migration-stable.en.txt
#07 june 2021 XXX warning: FEATURES=force-mirror will prevent a file to be found in SRC_URI of ebuild if it's not found in mirrors GENTOO_MIRRORS var. below!
#08dec2020 FEATURES=getbinpkg,binpkg-multi-instance from =-binpkg-multi-instance,-getbinpkg  so that binary packages(with same USE flags) are reused on emerge if they were already emerged in the past!
#Enable  support  for  multiple binary package instances per ebuild.  Having multiple instances is
#useful for a number of purposes, such as retaining builds that  were  built  with  different  USE
#flags  or  linked against different versions of libraries. The location of any particular package
#within PKGDIR can be expressed as follows:
#
#     ${PKGDIR}/${CATEGORY}/${PN}/${PF}-${BUILD_ID}.xpak

#buildsyspkg won't limit/restrict to only system packages if buildpkg is present, as per lib/_emerge/EbuildBuild.py or portage repo.
#splitdebug is  disabled  by  nostrip, hence why now using '-nostrip splitdebug'
#XXX binpkg-dostrip must be enabled for installsources to work.
#installsources: Install  source  code  into /usr/src/debug/${CATEGORY}/${PF} (also see splitdebug). This feature works only if debugedit is installed, CFLAGS is set to include debug information (such as with the -ggdb flag) and binpkg-dostrip is enabled.
#XXX If you enable both nostrip and splitdebug features, Portage won't strip binaries at all, so you have to pay attention to what you want. src: https://wiki.gentoo.org/wiki/Project:Quality_Assurance/Backtraces#Compiler_flags
#no compressdebug because we're already using btrfs with zstd compression! no point in recompressing with zlib and thus wasting time!
#downgrade-backup is creating quickpkg packages like --buildpkg
#with -usersync -userpriv -usersandbox userfetch, fetched files are : -rw-rw-r-- 1 portage portage
#with -usersync -userpriv -usersandbox -userfetch, fetched files are: -rw-rw-r-- 1 root portage
#^ fixed by a local portage patch to be root:root and 0644 ! fetch_as_root_root.patch
#FEATURES="$FEATURES -userpriv -usersandbox -suidctl" #for tests

#old:
#PORTDIR="/usr/portage"
#DISTDIR="${PORTDIR}/distfiles"
#PKGDIR="${PORTDIR}/packages"
#new:
# NOTE: This stage was built with the bindist Use flag enabled
PORTDIR="/var/db/repos/gentoo"
DISTDIR="/var/cache/distfiles"
PKGDIR="/var/cache/binpkgs"
#^ dir where .tbz2 files are placed when --buildpkg is used, or FEATURES=buildpkg


PORTAGE_GPG_DIR="/etc/portage/gpg"
#PORT_LOGDIR="/var/log/portage/ebuild.logs/" #this writes to disk EVERY LINE!!! while building the package(ie. ./configure ) - to disable, unset this var(man says)!
#PORT_LOGDIR="/tmp/ebuild.logs/"
#^ deprecated by PORTAGE_LOGDIR
PORTAGE_LOGDIR="/tmp/ebuild.logs/"
#note: not setting this, shows it as unset (ie. doesn't show it via emerge --info --verbose|grep -i logdir)
EMERGE_LOG_DIR="/var/log"
#       Controls the location of emerge.log and emerge-fetch.log.
#       Defaults to /var/log.



PORTAGE_BINHOST=""
#PORTAGE_WORKDIR_MODE="0700" # 0700 is the default, before even having gotten this: https://gitweb.gentoo.org/proj/portage.git/commit/?id=ef8c21e59953aa5fdd153f19b7bf04356e2164fe
PORTAGE_ECLASS_LOCATIONS="/somewhere /else"


#25 may 2022: temp swithing from ~amd64 aka unstable/testing to stable aka amd64 // nevermind too gdamn many changes would have to be done! so back to ~amd64
ACCEPT_KEYWORDS="~amd64"
#^ "To use more recent software, users can consider using the testing branch instead. To have Portage use the testing branch, add a ~ in front of the architecture. " src: https://wiki.gentoo.org/wiki/Handbook:X86/Portage/Branches
# looks like I have to use this, or else I get man-db 2.7.6 instead of 2.9.0 which has fixed some insignificant /etc/man_db.conf first-line comment "# gdbm" -> "# man_db.conf"

#ACCEPT_LICENSE="* -@EULA"
ACCEPT_LICENSE="-* @FREE freedist"
#/var/db/repos/gentoo/licenses/android
#freedist needed for man-pages-posix-2017a or else downgrade to sys-apps/man-pages-posix-2013a::gentoo ! /var/db/repos/gentoo/licenses/freedist

#INSTALL_MASK="/lib/systemd /lib32/systemd /lib64/systemd /usr/lib/systemd /usr/lib32/systemd /usr/lib64/systemd /etc/systemd"
#XXX: ^ it removed systemd-udevd executable! because it's in /lib/systemd  so ...

#USE_PYTHON is for legacy packages, not affecting modern ones, as per: https://forums.gentoo.org/viewtopic-p-7786860.html#7786860
#USE_PYTHON=2.7
#USE_PYTHON=3.4
#PYTHON_TARGETS="python3_4"
#^ https://wiki.gentoo.org/wiki/Project:Python/PYTHON_TARGETS
#PYTHON_TARGETS="python3_9 python3_8" #TODO: this was uncommented but due to `eselect news read 2021-05-05-python3-9` is now commented out and will now be using: /etc/portage/package.use/allpkgs_python_upgrade file!
#XXX: when adding this line for the first time, or something, some packages may fail to emerge, but rerunning emerge will cause them to emerge ok, ie. "fatal error: '-fuse-linker-plugin', but liblto_plugin.so not found" in net-mail/mailutils-3.10 (20201203-111521)

MAKEOPTS="--no-keep-going --output-sync=target"
#--load-average=
#doesn't work here: MAKEOPTS="${MAKEOPTS} -j$(( $(nproc) + $(nproc) / 2 ))" || MAKEOPTS="${MAKEOPTS} -j$(nproc)" || MAKEOPTS="${MAKEOPTS} -j4"  #any (with fallback!) - nproc is part of coreutils!

# Standard PC (BIOS)
GRUB_PLATFORMS="pc"

INPUT_DEVICES="libinput evdev"

#CCACHE_DIR="/var/tmp/ccache"
CCACHE_DIR="/ccache"
CCACHE_UMASK="0002"
#$ umask -S 0002
#u=rwx,g=rwx,o=rx
#without CCACHE_UMASK set(aka it must be 0022 which is u=rwx,g=rx,o=rx), you get:
#-rw-r--r-- 1 root portage 76 Dec 10 14:20 /ccache/0/7/stats
#-rw-r--r-- 1 root portage 76 Dec 10 14:20 /ccache/5/2/stats
#then with =0002 you get:
#-rw-rw-r-- 1 root portage 75 Dec 10 14:36 /ccache/0/8/stats
#-rw-rw-r-- 1 root portage 76 Dec 10 14:36 /ccache/5/2/stats
#the above happens with: rm /var/tmp/portage/dev-lang/python-3.9.0/.installed ; ebuild `equery w =dev-lang/python-3.9.0` install
#see: https://bugs.gentoo.org/492910#c5
CCACHE_SIZE="201G"
#-rw-r--r-- 1 root portage 16 Jul 24 02:54 /ccache/ccache.conf
#drwxrwsr-x   1 root    portage        22 Jul 24 02:54 /ccache
CCACHE_NOCOMPRESS=1
CCACHE_COMPRESSLEVEL=0
CCACHE_TEMPDIR="/tmp"
#CCACHE_NOREADONLY=1
CCACHE_NOHARDLINK=1
CCACHE_NOHASHDIR=1
CCACHE_SLOPPINESS="include_file_mtime,file_stat_matches,include_file_ctime,file_stat_matches_ctime"
#CCACHE_LOGFILE="/tmp/ccache.log"
#CCACHE_DEBUG=1


EVCS_UMASK="0002"
#$ umask -S 0002
#u=rwx,g=rwx,o=rx


#GENTOO_MIRRORS="http://de-mirror.org/gentoo/ http://gd.tuwien.ac.at/opsys/linux/gentoo/ http://ftp.romnet.org/gentoo/ http://tux.rainside.sk/gentoo/  http://www.las.ic.unicamp.br/pub/gentoo/"
#http://gentoo.mirrors.easynews.com/linux/gentoo/ http://gentoo.osuosl.org/"
#top 5 fastest...
#GENTOO_MIRRORS="https://mirror.wheel.sk/gentoo "
GENTOO_MIRRORS="https://ftp.belnet.be/pub/rsync.gentoo.org/gentoo/ https://mirror.init7.net/gentoo/ https://mirror.dkm.cz/gentoo/ https://mirrors.dotsrc.org/gentoo/ https://mirrors.ircam.fr/pub/gentoo-distfiles/ https://mirror.leaseweb.com/gentoo/ https://ftp.fau.de/gentoo https://linux.rz.ruhr-uni-bochum.de/download/gentoo-mirror/ https://gentoo.wheel.sk/ https://gentoo.osuosl.org/ https://mirror.ps.kz/gentoo/pub/ https://mirror.eu.oneandone.net/linux/distributions/gentoo/gentoo/ https://mirror.csclub.uwaterloo.ca/gentoo-distfiles/ https://ftp.halifax.rwth-aachen.de/gentoo/ https://ftp.halifax.rwth-aachen.de/gentoo/distfiles/ https://distfiles.gentoo.org"
#GENTOO_MIRRORS="https://distfiles.gentoo.org"
#removing mirror.wheel.sk doesn't have distfiles in like this url https://mirror.wheel.sk/gentoo/distfiles/kotlinx-coroutines-core-jvm-1.5.0.jar
#mirror gone (redirects to zerobounce) 08feb2022: https://mirrors.evowise.com/gentoo/
#mirror gone: https://gentoo.ussg.indiana.edu/
#gentoo.wheel.sk mirror usually has the new stuff, while all prev. ones fail with 404!
#XXX: those in `grep gentoo /var/db/repos/gentoo/profiles/thirdpartymirrors` will be tried if the above all yield 404 for example! these in thirdpartymirrors have /distfiles appended but these in GENTOO_MIRRORS do not; not sure how they are merged and if one expects to have that or not.  TODO: maybe get rid of these thirdpartymirrors code is in: /usr/lib64/python3.6/site-packages/portage/package/ebuild/fetch.py


XFCE_PLUGINS="brightness clock trash battery power"

#EPATCH_SOURCE='/patches'  #has no effect!
#EPATCH_SUFFIX='pech'
#EPATCH_FORCE='no'  #defaults to yes!
# if 'no' then expected patches filename: ??_${ARCH}_foo.${EPATCH_SUFFIX}
#use 'all' for the ${ARCH} part to apply a patch on all architectures (eg. not just amd64)

#EVCS_OFFLINE='1'
#EVCS_OFFLINE if non-empty prevents any online operations (eg. git pull) - this is what I need when I don't have internet but I want to re-emerge a -9999 package

# EMERGE_DEFAULT_OPTS is set automatically by livecd-tools autoconfig during first live boot.
# This should be equal to number of processors, see "man emerge" for details.
#EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --jobs=4 --load-average=4 --ask --ask-enter-invalid"
# XXX: these get overriden below when including host-specific .conf !
EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --jobs=4 --load-average=4 --keep-going=n --usepkg=y --ask --ask-enter-invalid --autounmask-use=y --binpkg-changed-deps=y --tree --deep --nospinner --backtrack=300 --with-bdeps=y --forceWKDupdate n"
#07march2022: can't use --binpkg-respect-use=y because it forces --autounmask-use=n which means it won't ask you to write suggested USE changes in order to be able to emerge some packages and will thus fail! However man page says --binpkg-respect-use=y is auto enabled unless --usepkgonly is enabled
#EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS} --jobs=4 --load-average=4 --keep-going n --ask --ask-enter-invalid --forceWKDupdate n"
#XXX 08dec2020 --usepkg=y added(thanks grknight on #gentoo) as a --getbinpkg equivalent of installing the binpkgs from /var/cache/binpkgs without having to use a remote URI via /etc/portage/binrepos.conf or PORTAGE_BINHOST 
#--forceWKDupdate n is the default and it's a patch I've added to skip WKD keys update! see 'man emerge' maybe it will be listed there? (it's not in emerge --help !)

#default:
#RESUMECOMMAND="wget -c -t 3 -T 60 --passive-ftp -O "${DISTDIR}/${FILE}" "${URI}""
#FETCHCOMMAND="wget -t 3 -T 60 --passive-ftp -O "${DISTDIR}/${FILE}" "${URI}""

#XXX: WARNING: you can't use --tries >0 and -O because it will append/concat to the outfile! this is a wget bug then(yes it is). (05 Aug 2022) (-c doesn't affect this issue)
#but for some reason this only sometimes triggers (when used on command line, or within repoman eg. /usr/lib/python3.9/site-packages/portage/_emirrordist/FetchTask.py )
#see /home/user/sandbox/python/server_for_wget  it's when a 302 FOUND happens after a retry, wget doesn't send Range bytes anymore thus 200 OK happens but wget still appends what it gets (and it gets the whole file again, of course)
_ahem_wgetCOMMONCOMMANDpre="/usr/bin/wget"
_ahem_wgetCOMMONCOMMANDaft="--tries=3 --timeout=2 --passive-ftp --output-document=\"\${DISTDIR}/\${FILE}\" \"\${URI}\""
RESUMECOMMAND="$_ahem_wgetCOMMONCOMMANDpre --continue $_ahem_wgetCOMMONCOMMANDaft"
FETCHCOMMAND="$_ahem_wgetCOMMONCOMMANDpre $_ahem_wgetCOMMONCOMMANDaft"
#06 aug 2022, keep wget because after timeout we want it to continue(doesn't need --continue btw!) transfer and not scrap it and redownload like curl would! XXX: switching from wget to curl: (both tested to work ok)
#_ahem_wgetCOMMONCOMMANDpre="/usr/bin/curl"
#_ahem_wgetCOMMONCOMMANDaft="--parallel --retry 3 --connect-timeout 2 --max-time 120 --retry-max-time 420 --ftp-pasv --max-redirs 30 --location --output \"\${DISTDIR}/\${FILE}\" -- \"\${URI}\""
#RESUMECOMMAND="$_ahem_wgetCOMMONCOMMANDpre --continue-at - $_ahem_wgetCOMMONCOMMANDaft"
#FETCHCOMMAND="$_ahem_wgetCOMMONCOMMANDpre $_ahem_wgetCOMMONCOMMANDaft"
#--max-time Maximum time in seconds that you allow each transfer to take. If you enable retrying the transfer (--retry) then the maximum time counter is reset each time the transfer is retried. You  can  use  --retry-max-time to limit the retry time.
#--max-redirs 30 --location  Set  maximum  number of redirections to follow when --location is used. | If  the  server reports that the requested page has moved to a different location(eg. 3xx like 302 FOUND) this option will make curl redo the request on the new place.
#ok, even when using "--continue-at -" for FETCHCOMMAND, curl will still discard the already downloaded stuff when retry-ing happens, thus redownloading whole thing!(even with just --retry, not just with also --retry-all-errors as the man says it would for this one for sure, but doesn't say it would for --retry) which is crap, thus XXX: using wget is better as it continues (eg. 206 PARTIAL_CONTENT) even when --continue isn't specified (with -O file)



# This sets the language of build output to English.
# Please keep this setting intact when reporting bugs.
LC_MESSAGES=C

PORTAGE_IONICE_COMMAND="ionice -c 3 -p \${PID}"
#^ sets idle i/o prio for emerge. Thanks Triffid_Hunter on #gentoo freenode irc

#doneTODO: maybe use "zstd" instead? see: 'man make.conf' (thanks <wraeth>)
#PORTAGE_COMPRESS="xz"
PORTAGE_COMPRESS=""
#^ that means no compress docs (when set to empty) as per bin/ecompress (where "-" instead of ":-" means, "test only for a parameter that is unset" as per 'man bash', where ":-" would mean +"or null")
#PORTAGE_COMPRESS="zstd"
#PORTAGE_COMPRESS_FLAGS="--threads=0 -z -1"
#BINPKG_COMPRESS="xz"
#this is for the .tbz2 compression:
#BINPKG_COMPRESS="zstd"
#BINPKG_COMPRESS_FLAGS="--threads=0 -z -1"
BINPKG_COMPRESS=""
#" # Empty BINPKG_COMPRESS disables compression" https://bugs.gentoo.org/654456
# they are now named *.xpak not .tbz2 and in their own dir (prolly due to FEATURES=binpkg-multi-instance)




#source /etc/portage/make.conf.additions.Z575.conf
source /etc/portage/make.conf.additions.i87k.conf

#EGIT_OVERRIDE_REPO_GLIBC="localhost" #for testing!
KBUILD_OUTPUT="/tmp/genkernel.outdir/"
#^ some packages like the following require access to .config and stuff: app-misc/ddcutil-1.4.1: x11-drivers/xf86-input-libinput-1.4.0:  app-emulation/virtualbox-modules app-laptop/tp_smapi x11-drivers/nvidia-drivers

#keep this line last, so we can see if this is set(or not) in `emerge --info --verbose |grep -v '^LS_COLORS=' | grep -v '^LESS_TERMCAP'`
Zglobal=1
