#https://wiki.archlinux.org/index.php/Sysctl#Improving_performance
#Increasing the size of the receive queue.
#The received frames will be stored in this queue after taking them from the ring buffer on the network card.
#Increasing this value for high speed cards may help prevent losing packets:
#original values:
#net.core.netdev_budget = 300
#net.core.netdev_budget_usecs = 2000
#net.core.netdev_max_backlog = 1000
net.core.netdev_budget = 50000
net.core.netdev_budget_usecs = 5000
net.core.netdev_max_backlog = 100000

#Increase the maximum connections
#The upper limit on how many connections the kernel will accept (default 128): 
net.core.somaxconn = 256
#Warning: Increasing this value may only increase performance on high-loaded servers and may cause as slow processing rate (e.g. a single threaded blocking server) or insufficient number of worker threads/processes [1].

#Increase the memory dedicated to the network interfaces
#The default the Linux network stack is not configured for high speed large file transfer across WAN links (i.e. handle more network packets) and setting the correct values may save memory resources:
#origs:
#net.core.rmem_default = 212992
#net.core.rmem_max = 212992
#net.core.wmem_default = 212992
#net.core.wmem_max = 212992
#net.core.optmem_max = 20480
#net.ipv4.tcp_rmem = 4096	131072	6291456
#net.ipv4.tcp_wmem = 4096	16384	4194304
#mods:
net.core.rmem_default = 1048576
net.core.rmem_max = 16777216
net.core.wmem_default = 1048576
net.core.wmem_max = 16777216
net.core.optmem_max = 65536
net.ipv4.tcp_rmem = 4096 1048576 2097152
net.ipv4.tcp_wmem = 4096 65536 16777216
#It is also possible increase the default 4096 UDP limits:
#net.ipv4.udp_rmem_min = 4096
#net.ipv4.udp_wmem_min = 4096
net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192

#Enable TCP Fast Open
#TCP Fast Open is an extension to the transmission control protocol (TCP) that helps reduce network latency by enabling data to be exchanged during the senderâ€™s initial TCP SYN [2]. Using the value 3 instead of the default 1 allows TCP Fast Open for both incoming and outgoing connections: 
#orig:
#net.ipv4.tcp_fastopen = 1
#net.ipv4.tcp_fastopen_blackhole_timeout_sec = 3600
#mod:
net.ipv4.tcp_fastopen = 3

#tcp_slow_start_after_idle sets whether TCP should start at the default window size only for new connections or also for existing connections that have been idle for too long.
#This setting kills persistent single connection performance and could be turned off:
#orig:
#net.ipv4.tcp_slow_start_after_idle = 1
#mod
net.ipv4.tcp_slow_start_after_idle = 0


#Change TCP keepalive parameters
#
#    TCP keepalive is a mechanism for TCP connections that help to determine whether the other end has stopped responding or not.
#    TCP will send the keepalive probe contains null data to the network peer several times after a period of idle time. If the peer does not respond, the socket will be closed automatically.
#    By default, TCP keepalive process waits for two hours (7200 secs) for socket activity before sending the first keepalive probe, and then resend it every 75 seconds. As long as there is TCP/IP socket communications going on and active, no keepalive packets are needed.
#
#Note: With the following settings, your application will detect dead TCP connections after 120 seconds (60s + 10s + 10s + 10s + 10s + 10s + 10s)
#orig:
#net.ipv4.tcp_keepalive_intvl = 75
#net.ipv4.tcp_keepalive_probes = 9
#net.ipv4.tcp_keepalive_time = 7200
#mod:
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_keepalive_intvl = 10
net.ipv4.tcp_keepalive_probes = 6

#Enable MTU probing
#
#The longer the MTU the better for performance, but the worse for reliability.
#
#This is because a lost packet means more data to be retransmitted and because many routers on the Internet can't deliver very long packets:
#
#mod:
#net.ipv4.tcp_mtu_probing = 1
#orig: let's keep this off
net.ipv4.tcp_mtu_probing = 0

