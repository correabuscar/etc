# Enable hard and soft link protection

fs.protected_symlinks = 1
fs.protected_hardlinks = 1


#protected_symlinks
#------------------
#
#A long-standing class of security issues is the symlink-based
#time-of-check-time-of-use race, most commonly seen in world-writable
#directories like /tmp. The common method of exploitation of this flaw
#is to cross privilege boundaries when following a given symlink (i.e. a
#root process follows a symlink belonging to another user). For a likely
#incomplete list of hundreds of examples across the years, please see:
#https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=/tmp
#
#When set to "0", symlink following behavior is unrestricted.
#
#When set to "1" symlinks are permitted to be followed only when outside
#a sticky world-writable directory, or when the uid of the symlink and
#follower match, or when the directory owner matches the symlink's owner.
#
#This protection is based on the restrictions in Openwall and grsecurity.
#

#protected_hardlinks
#--------------------
#
#A long-standing class of security issues is the hardlink-based
#time-of-check-time-of-use race, most commonly seen in world-writable
#directories like /tmp. The common method of exploitation of this flaw
#is to cross privilege boundaries when following a given hardlink (i.e. a
#root process follows a hardlink created by another user). Additionally,
#on systems without separated partitions, this stops unauthorized users
#from "pinning" vulnerable setuid/setgid files against being upgraded by
#the administrator, or linking to special files.
#
#When set to "0", hardlink creation behavior is unrestricted.
#
#When set to "1" hardlinks cannot be created by users if they do not
#already own the source file, or do not have read/write access to it.
#
#This protection is based on the restrictions in Openwall and grsecurity.
#

#protected_regular
#-----------------
#
#This protection is similar to protected_fifos, but it
#avoids writes to an attacker-controlled regular file, where a program
#expected to create one.
#
#When set to "0", writing to regular files is unrestricted.
#
#When set to "1" don't allow O_CREAT open on regular files that we
#don't own in world writable sticky directories, unless they are
#owned by the owner of the directory.
#
#When set to "2" it also applies to group writable sticky directories.
#
#Guessing /tmp won't work with this =1 ? but it was already =1 on archlinux and it worked, so hmmm... yeah I guess I misunderstood!
fs.protected_regular = 1
#this is =1 on archlinux, =0 on gentoo

#protected_fifos
#---------------
#
#The intent of this protection is to avoid unintentional writes to
#an attacker-controlled FIFO, where a program expected to create a regular
#file.
#
#When set to "0", writing to FIFOs is unrestricted.
#
#When set to "1" don't allow O_CREAT open on FIFOs that we don't own
#in world writable sticky directories, unless they are owned by the
#owner of the directory.
#
#When set to "2" it also applies to group writable sticky directories.
#
#This protection is based on the restrictions in Openwall.
#
fs.protected_fifos = 1
#this is =1 on archlinux, =0 on gentoo

