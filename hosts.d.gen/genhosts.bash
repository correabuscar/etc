#!/bin/bash

#XXX name of this script ./genhosts.bash is referenced here and in /etc/dnsmasq.d/rme.txt and /etc/hosts.d.gen/rme.txt , so don't change it.

#set -xv
#id
source "/swcode/swcode.bash" ;
rerunasroot "$@" ;

scriptdir="$(realpath --canonicalize-existing -- "$(dirname -- "$0")")"
scriptdir_withslash="${scriptdir}/"
scriptself="${scriptdir}/$(basename -- "$0")"
if test -z "$scriptdir" -o ! -x "$scriptself"; then
  echo "Can't find scriptdir ("$scriptdir") or script("$0") doesn't exist as executable file ("$scriptself")" >&2
  exit 1
fi
#set -xev
set -e
source "${scriptdir_withslash}vars.env"
set +e
#set +xev

function main() {

if test "$1" != "nodiff"; then
  if which colordiff >/dev/null 2>&1; then
    diff=colordiff
    if test -n "$DEBUG" -a "0$DEBUG" != "00"; then
      echo "Using '$diff'" >&2
    fi
  else
    diff=diff
  fi
fi

destfile="$etchosts"
if test -z "$destfile"; then
  echo "vars.env is bad, because '\$etchosts' is empty" >&2
  exit 1
fi
tmpfile="$(mktemp --tmpdir="/tmp" -t -- "etc_hosts_gen_XXXXXXXXXX_$(date --iso-8601=ns|tr ':,+' '_')")"
if test -n "$DEBUG" -a "0$DEBUG" != "00"; then
  echo "Using temp file '$tmpfile'" >&2
fi
#date --iso-8601=ns|tr ':,+' '_' is like 2021-06-10T00_15_51_904809374_02_00

#using *.conf mainly for vim syntax highlighting and to avoid catching any scripts(*.bash) residing in there.

set -e
cat > "$tmpfile" <<EOF
#Autogenerated by '$0' script(aka '$scriptself') (in order to create a new '$destfile') on `date`
#DO not modify this directly but instead use '$hostsdgen_dir_withslash' and place a new .conf file there in same format as /etc/hosts
EOF

#-L follow links
#find -L "$hostsdgen_dir_withslash" -type f -and -name '*.conf' -and -printf '%P\0'| sort -z | xargs -0 -P1 -- cat -- >> "$tmpfile"
#XXX last good:
find -L "$hostsdgen_dir_withslash" -type f -and -name '*.conf' -and -print0 | sort -z | xargs -0 -P1 -- cat -- >> "$tmpfile"
#if you want IPs to be marked for tracking, the blocked hostnames would use different 127.0.0.0/8 IPs so they can be seen in the logs when blocked by iptables. Not recommended in case you have something listening on localhost on that port(eg. 443) then the browser could access it, unless it's NOT listening on 0.0.0.0 or 127.0.0.0/8 ! (fixed sshd in regards to this!)

#XXX tried, good:
##cat /etc/hosts|awk 'BEGIN {
#find -L "$hostsdgen_dir_withslash" -type f -and -name '*.conf' -and -print0 | sort -z | xargs -0 -P1 -- cat -- |awk 'BEGIN {
##IP has form: 127.a.b.c initially 127.1.1.1
#a=1;
#b=1;
#c=0;
#max=254; #eg. 127.254.254.254
#}
#/^[[:space:]]*(0\.0\.0\.0)[[:space:]]/ {
#c++;
#if (c>max) {
#  c=1;
#  b++;
#  if (b>max) {
#    b=1;
#    a++;
#    if (a>max) {
#      #have="0.0.0.0 "$2;
#      $1="";
#      have="0.0.0.0"$0;
#      a=max;
#      b=max;
#      c=max;
#      print "# overflow, thus using 0.0.0.0 instead!"
#    };
#  };
#} else {
#  #have="127."a"."b"."c" "$2;
#  #workaround for $2- as follows:
#  $1="";
#  have="127."a"."b"."c""$0;
#  #this adds an extra space.
#}
#print have; next;
#};
#// { print $0 }
#' >> "$tmpfile"

echo "# all done from '$0'" >> "$tmpfile"
backedfilename="${destfile}.backedup_by_$(realpath -- "$0"|tr '/' '_')_on_$(date --iso-8601=ns|tr ':,+' '_')"
cp -ai "$destfile" "$backedfilename"
echo "Backed up current $destfile as $backedfilename"
set +e
if test "$1" != "nodiff" -a -e "$destfile" ; then
  "$diff" -up -- "$destfile" "$tmpfile" | less
fi
set -e
chmod a+r -- "$tmpfile"
#Overwrite current, ACID-like:
mv -- "$tmpfile" "$destfile"
#^ used temp file so that resulting output file won't be garbled
#^ used lockedcall for the same reason + extra safety
set +e

echo "All good! '$destfile' (re)generated."
} #main

lockedcall 301 main "$@"

