
#vm.dirty_writeback_centisecs is how often the pdflush/flush/kdmflush processes wake up and check to see if work needs to be done.
#600 secs (10mins)
#echo 60000 > /proc/sys/vm/dirty_writeback_centisecs
#vm.dirty_writeback_centisecs=60000 #XXX last known good
#due to system crashing and thus btrfs yielding 0 byte files afterwards, resetting tthis from 600secs(10mins) to 10 secs(remember 100 centisecs=1sec):
#vm.dirty_writeback_centisecs=1000 #bad! always use at least 60000 here, or =0, read below!
#vm.dirty_writeback_centisecs=0
#vm.dirty_writeback_centisecs=60000
#^ temp
vm.dirty_writeback_centisecs=1000
#^ ok well this seems good, keeping it, 04feb2020
#unspecified(with tlp) is: vm.dirty_writeback_centisecs = 60000
#unspecified(w/o tlp) is: vm.dirty_writeback_centisecs = 500
#^ yup: mm/page-writeback.c:102:unsigned int dirty_writeback_interval = 5 * 100; /* centiseconds */
#dirty_writeback_centisecs
#
#The kernel flusher threads will periodically wake up and write `old' data
#out to disk.  This tunable expresses the interval between those wakeups, in
#100'ths of a second.
#
#Setting this to zero disables periodic writeback altogether.
#TODO: set this to 0 if you want to have no interruptions during sftp to sda copying which happens during flushing - no sftp/net activity for a few seconds! What I know it works is all 3 of: vm.dirty_writeback_centisecs=60000, vm.dirty_expire_centisecs=360000 and btrfs remount with commit=500; what it doesn't work(ie. stalls as I mentioned): is commit=5 and =1000 for both of the above.
#XXX OK, this vm.dirty_writeback_centisecs=1000 or 10000(tested) is the one that is stopping all read/write activity while it writes all the cached stuff to disk, thus stopping all network activity! with this =60000 for example, even though writing does happen occasionaly, it doesn't interrupt network or other disk reads!!! So, 06 July 2019, disabling this by setting it to =0 (note: this was on btrs with commit=5 as mount option and with vm.dirty_expire_centisecs=1000 below)
#looks like vm.dirty_writeback_centisecs(non zero) when triggers acts like a sync (or at least by bin/sync) which stops all during/until sync is finished!

#vm.dirty_expire_centisecs is how long something can be in cache before it needs to be written. In this case it’s 30 seconds. When the pdflush/flush/kdmflush processes kick in they will check to see how old a dirty page is, and if it’s older than this value it’ll be written asynchronously to disk. Since holding a dirty page in memory is unsafe this is also a safeguard against data loss.
#3600 secs (1 hour)
#echo 360000 > /proc/sys/vm/dirty_expire_centisecs
#vm.dirty_expire_centisecs=360000 #XXX: last known good
#due to system crashing and thus btrfs yielding 0 byte files afterwards, resetting tthis from 3600secs(1hour) to 10 secs(remember 100 centisecs=1sec):
vm.dirty_expire_centisecs=1000
#^ ok well this seems good, keeping it, 04feb2020  with commit=10 on btrfs mount options
#vm.dirty_expire_centisecs=360000
#^ temp
#unspecified(with tlp) is: vm.dirty_expire_centisecs = 60000
#unspecified(w/o tlp) is: vm.dirty_expire_centisecs = 3000


#descriptions from: https://lonesysadmin.net/2013/12/22/better-linux-disk-caching-performance-vm-dirty_ratio/


##vm.dirtytime_expire_seconds = 43200  #w/o tlp if unspecified
