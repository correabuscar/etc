#this is manually taken from a Manjaro install of ufw, file: /etc/ufw/sysctl.conf
#and mixed in with gentoo's sysctl.conf

#descriptions: ${HOME}/build/1packages/kernel/linuxgit/makepkg_pacman/linux-git/src/linux-git/Documentation/networking/ip-sysctl.txt

# Uncomment this to allow this host to route packets between interfaces
#net.ipv4.ip_forward=1
#net.ipv6.conf.default.forwarding=1
#net.ipv6.conf.all.forwarding=1

# Disables packet forwarding
net.ipv4.ip_forward = 0
#^ This variable is special, its change resets all configuration parameters to their default state (RFC1122 for hosts, RFC1812 for routers) - so it must be first, then, right?!
#Adding these(following ones) because it seems to have been also reset by setting net.ipv4.ip_forward above(eg. from 1 to 0):
net.ipv4.conf.default.forwarding = 0
net.ipv4.conf.all.forwarding=0
#net.ipv4.conf.enp1s0.forwarding=0
#net.ipv4.conf.lo.forwarding=0


#continuing normally:
net.ipv6.conf.default.forwarding=0
net.ipv6.conf.all.forwarding=0
# Disables IP dynaddr
#net.ipv4.ip_dynaddr = 0
# Disable ECN
#net.ipv4.tcp_ecn = 0
#From redhat doc:
#disable forwarding of all multicast packets on all interfaces.
net.ipv4.conf.all.mc_forwarding=0
#XXX ^ hmm that gives me "systemd-sysctl[246]: Couldn't write '0' to 'net/ipv4/conf/all/mc_forwarding', ignoring: Permission denied" however it's still '0' probably because of the previous setters!
net.ipv6.conf.all.mc_forwarding=0


#Sets the kernels reverse path filtering mechanism to value 1 (on). Will do source validation of the packet's received from all the interfaces on the machine. Protects from attackers that are using ip spoofing methods to do harm (default): 
#
# Turn on Source Address Verification in all interfaces to prevent some
# spoofing attacks
# Enables source route verification
# 0 — No source validation.
# 1 — Strict mode as defined in RFC 3704.
# 2 — Loose mode as defined in RFC 3704.
#see also Documentation/networking/ip-sysctl.txt
net.ipv4.conf.default.rp_filter = 1
# Enable reverse path
net.ipv4.conf.*.rp_filter = 1
net.ipv4.conf.all.rp_filter = 1
#-net.ipv4.conf.all.rp_filter
#^ does this remove it?(seen on Archlinux with that '-' prefix!) then what value does it have?!

#origs:
#net.ipv4.conf.lo.rp_filter = 0
#net.ipv4.conf.lo.arp_filter = 0
#net.ipv4.conf.all.arp_filter = 0
#net.ipv4.conf.default.arp_filter = 0

#arch default is =2, dno in gentoo because I've already had =1 above!
#rp_filter - INTEGER                                                             
#  - 0 - No source validation.
#  - 1 - Strict mode as defined in RFC3704 Strict Reverse Path
#    Each incoming packet is tested against the FIB and if the interface
#    is not the best reverse path the packet check will fail.
#    By default failed packets are discarded.
#  - 2 - Loose mode as defined in RFC3704 Loose Reverse Path
#    Each incoming packet's source address is also tested against the FIB
#    and if the source address is not reachable via any interface
#    the packet check will fail.
#
#  Current recommended practice in RFC3704 is to enable strict mode
#  to prevent IP spoofing from DDos attacks. If using asymmetric routing
#  or other complicated routing, then loose mode is recommended.
#
#  The max value from conf/{all,interface}/rp_filter is used
#  when doing source validation on the {interface}.
#
#  Default value is 0. Note that some distributions enable it
#  in startup scripts.


# Do not accept IP source route packets (we are not a router)
# Disable source route (0 or 1, boolean below)
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.*.accept_source_route = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route=0
net.ipv6.conf.*.accept_source_route = 0
net.ipv6.conf.all.accept_source_route=0
#it is//0 is no good! oh hang on, there's another one called 'accept_source_route' that's an integer!
#accept_source_route - BOOLEAN
#  Accept packets with SRR option.
#  conf/all/accept_source_route must also be set to TRUE to accept packets
#  with SRR option on the interface
#
#  default
#
#    - TRUE (router)
#    - FALSE (host)


#``conf/interface/*``:
#  Change special settings per interface.
#
#  The functional behaviour for certain settings is different
#  depending on whether local forwarding is enabled or not.
net.ipv4.conf.*.accept_source_route = -1
net.ipv6.conf.*.accept_source_route = -1
#src: /usr/src/linux-6.0.9-gentoo/Documentation/networking/ip-sysctl.rst
#accept_source_route - INTEGER
#  Accept source routing (routing extension header).
#
#  - >= 0: Accept only routing header type 2.
#  - < 0: Do not accept routing header.
#
#  Default: 0
#grep seems to think this only affects IPv6 !! 


# Disable ICMP redirects. ICMP redirects are rarely used but can be used in
# MITM (man-in-the-middle) attacks. Disabling ICMP may disrupt legitimate
# traffic to those sites.(but this redirects only, right?! so why even say that)
# Disable redirects
# "Accepting ICMP redirects has few legitimate uses. Disable the acceptance and sending of ICMP redirected packets unless specifically required.
#The .all.accept_redirects disables "acceptance of all ICMP redirected packets on all interfaces."
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects=0
net.ipv6.conf.all.accept_redirects=0
# Disable secure redirects
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.secure_redirects=0
net.ipv6.conf.default.secure_redirects=0
#Next send_redirects added by me, found description later:
#disables sending of all IPv4 ICMP redirected packets on all interfaces.
#src: https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sect-Security_Guide-Server_Security-Disable-Source-Routing.html
net.ipv4.conf.default.send_redirects =0
net.ipv4.conf.all.send_redirects = 0
net.ipv6.conf.default.send_redirects =0
net.ipv6.conf.all.send_redirects = 0

# Ignore ICMP broadcasts (ECHO! bcasts, not all icmp bcasts, right?)
net.ipv4.icmp_echo_ignore_broadcasts = 1
# Ignore bogus ICMP errors
net.ipv4.icmp_ignore_bogus_error_responses=1
#pinging me? 1=ignore, 0=allow
net.ipv4.icmp_echo_ignore_all=0

# Don't log Martian Packets (impossible packets)
#net.ipv4.conf.default.log_martians=0
#net.ipv4.conf.all.log_martians=0
#actually do log them:
net.ipv4.conf.default.log_martians=1
net.ipv4.conf.all.log_martians=1

# Change to '1' to enable TCP/IP SYN cookies This disables TCP Window Scaling
# (http://lkml.org/lkml/2008/2/5/167)
# Enable SYN cookies (yum!)
# http://cr.yp.to/syncookies.html
# Helps protect against SYN flood attacks. Only kicks in when net.ipv4.tcp_max_syn_backlog is reached, src: https://wiki.archlinux.org/index.php/Sysctl#Improving_performance
#net.ipv4.tcp_syncookies = 1
#orig:
net.ipv4.tcp_syncookies = 1

#Tweak the pending connection handling
#
#tcp_max_syn_backlog is the maximum queue length of pending connections 'Waiting Acknowledgment'.
#
#In the event of a synflood DOS attack, this queue can fill up pretty quickly, at which point tcp_syncookies will kick in allowing your system to continue to respond to legitimate traffic, and allowing you to gain access to block malicious IPs.
#
#If the server suffers from overloads at peak times, you may want to increase this value a little bit:
#
#mod:
#net.ipv4.tcp_max_syn_backlog = 30000
#orig:
#net.ipv4.tcp_max_syn_backlog = 512



# Default is 60
net.ipv4.tcp_fin_timeout=10

# Default is 75
#net.ipv4.tcp_keepalive_intvl=1800

# normally allowing tcp_sack is ok, but if going through OpenBSD 3.8 RELEASE or
# earlier pf firewall, should set this to 0
net.ipv4.tcp_sack=1

# Uncomment this to turn off ipv6 autoconfiguration
net.ipv6.conf.default.autoconf=0
net.ipv6.conf.all.autoconf=0

# Uncomment this to enable ipv6 privacy addressing
net.ipv6.conf.default.use_tempaddr=2
net.ipv6.conf.all.use_tempaddr=2

#the ipv6 stuff doesn't exist when ipv6 isn't enabled in kernel, eg. no /proc/sys/net/ipv6/ but we leave these on for the times when we're booting stock arch kernels
