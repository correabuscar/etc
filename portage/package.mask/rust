#unmasking on 11june2024: not ready yet! remasking on 12june2024:
=dev-lang/rust-9999
=virtual/rust-9999
#^ fails to compile currently, due to: https://github.com/rust-lang/rust/pull/79336
#>dev-lang/rust-1.49.0
#>dev-lang/rust-1.58.1
#>dev-lang/rust-1.59.0
#>dev-lang/rust-1.64.0-r1
#>dev-lang/rust-1.65.0
#<dev-lang/rust-1.65.0
dev-lang/rust::gentoo
#^ a better way, without the need to version-guess, thanks to comments on: https://bugs.gentoo.org/show_bug.cgi?id=879815
#^ to avoid bypassing the ::localrepo ebuild! if you wanna update, ensure you copy the new ebuild from ::gentoo repo to ::localrepo then update this! no need to update this now, since it has no version here anymore.
#XXX: always mask the virtual too, or else it will install rust-bin !
#>virtual/rust-1.49.0
#>virtual/rust-1.58.1
#>virtual/rust-1.59.0
#>virtual/rust-1.64.0-r1
#>virtual/rust-1.65.0
#<virtual/rust-1.65.0
#>virtual/rust-1.65.0-r1
virtual/rust::gentoo
#^ as per comments on: https://bugs.gentoo.org/show_bug.cgi?id=879815

#>dev-lang/rust-bin-1.48.0
#dev-lang/rust-bin
#^ needed the first ever time when rust(from source) gets emerged; and later on if you dont't have prev. version if USE=system-bootstrap !
#
#TODO find a better way to be notified when new rust version is available (currently no idea!)
#

#for bootstrap rust 1.52.0 needs either prev. version or same version, so don't mask the bin! or else you get circular dep. since 1.52.0 depends on 1.52.0 then, if 1.49.0 was the last you ever had. Can not use flag 'bootstrap' (eg. USE=-system-bootstrap) to avoid this circular dependency! in which case it will use its own binary rust downloaded from upstream while building (most likely)
#so now with the rust-bin stuff NOT masked, it can download the same 1.52.0 version in bin form! and use it to bootstrap! OR you can USE=-system-bootstrap to not do that?! but this means it wants to download stuff during building rust!
#
##ignore:
#nvm(noprob!)// XXX problem: with USE=system-bootstrap the 1.52.0 rust bin(!) isn't nightly but nightly is needed for some -Z commands used by rust during build as per this error:  ah that's because COMMON_RUSTFLAGS="${COMMON_NATIVE_RUSTFLAGS} -Z treat-err-as-bug=5 -Z macro-backtrace" in make.conf
#>>> Source configured.
#mount: Entry '0' exit code: '0'
#mount: Entry '0' exit code: '0'
#>>> Compiling source in /var/tmp/portage/dev-lang/rust-1.52.0/work/rustc-1.52.0-src ...
#running: /opt/rust-bin-1.52.0/bin/cargo build --manifest-path /var/tmp/portage/dev-lang/rust-1.52.0/work/rustc-1.52.0-src/src/bootstrap/Cargo.toml --verbose --locked --frozen
#error: failed to run `rustc` to learn about target-specific information
#
#Caused by:
#  process didn't exit successfully: `/opt/rust-bin-1.52.0/bin/rustc - --crate-name ___ --print=file-names -C target-cpu=skylake -Z treat-err-as-bug=5 -Z macro-backtrace -Lnative=/usr/lib/llvm/12/lib64 -Cdebuginfo=2 -C linker=x86_64-pc-linux-gnu-gcc -Wrust_2018_idioms -Wunused_lifetimes -Dwarnings --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=cfg` (exit code: 1)
#  --- stderr
#  error: the option `Z` is only accepted on the nightly compiler
#
#Traceback (most recent call last):
#  File "/var/tmp/portage/dev-lang/rust-1.52.0/work/rustc-1.52.0-src/./x.py", line 27, in <module>
#    bootstrap.main()
#  File "/var/tmp/portage/dev-lang/rust-1.52.0/work/rustc-1.52.0-src/src/bootstrap/bootstrap.py", line 1176, in main
#    bootstrap(help_triggered)
#  File "/var/tmp/portage/dev-lang/rust-1.52.0/work/rustc-1.52.0-src/src/bootstrap/bootstrap.py", line 1149, in bootstrap
#    build.build_bootstrap()
#  File "/var/tmp/portage/dev-lang/rust-1.52.0/work/rustc-1.52.0-src/src/bootstrap/bootstrap.py", line 901, in build_bootstrap
#    run(args, env=env, verbose=self.verbose)
#  File "/var/tmp/portage/dev-lang/rust-1.52.0/work/rustc-1.52.0-src/src/bootstrap/bootstrap.py", line 153, in run
#    raise RuntimeError(err)
#RuntimeError: failed to run: /opt/rust-bin-1.52.0/bin/cargo build --manifest-path /var/tmp/portage/dev-lang/rust-1.52.0/work/rustc-1.52.0-src/src/bootstrap/Cargo.toml --verbose --locked --frozen
# * ERROR: dev-lang/rust-1.52.0::localrepo failed (compile phase):
# *   (no error message)
# *
# * Call stack:
# *     ebuild.sh, line 125:  Called src_compile
# *   environment, line 3576:  Called die
# * The specific snippet of code:
# *       env $(cat "${S}"/config.env) RUST_BACKTRACE=1 "${EPYTHON}" ./x.py dist -vv --config="${S}"/config.toml -j$(makeopts_jobs) || die )
# *
##end of ignore!

