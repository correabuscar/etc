#watchdog_thresh
#===============
#
#This value can be used to control the frequency of hrtimer and NMI
#events and the soft and hard lockup thresholds. The default threshold
#is 10 seconds.
#
#The softlockup threshold is (``2 * watchdog_thresh``). Setting this
#tunable to zero will disable lockup detection altogether.
#
kernel.watchdog_thresh = 10
#  watchdog_thresh=
#      [KNL]
#      Set the hard lockup detector stall duration
#      threshold in seconds. The soft lockup detector
#      threshold is set to twice the value. A value of 0
#      disables both lockup detectors. Default is 10
#      seconds.
#10 is default
#needs CONFIG_BOOTPARAM_HARDLOCKUP_PANIC to be y
#── Panic (Reboot) On Hard Lockups ───────────────────────────────────────────
#
# CONFIG_BOOTPARAM_HARDLOCKUP_PANIC:
#
# Say Y here to enable the kernel to panic on "hard lockups",
# which are bugs that cause the kernel to loop in kernel
# mode with interrupts disabled for more than 10 seconds (configurable
# using the watchdog_thresh sysctl).
#
# Say N if unsure.
#
# Symbol: BOOTPARAM_HARDLOCKUP_PANIC [=n]
# Type  : bool
# Defined at lib/Kconfig.debug:1139
#   Prompt: Panic (Reboot) On Hard Lockups
#   Depends on: HARDLOCKUP_DETECTOR [=y]
#   Location:
#     -> Kernel hacking
#       -> Debug Oops, Lockups and Hangs
#         -> Panic (Reboot) On Hard Lockups (BOOTPARAM_HARDLOCKUP_PANIC [=n])
#

#I've also set this to =y
#── Panic (Reboot) On Soft Lockups ─────────────────────────────────────────────
#
# CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC:
#
# Say Y here to enable the kernel to panic on "soft lockups",
# which are bugs that cause the kernel to loop in kernel
# mode for more than 20 seconds (configurable using the watchdog_thresh
# sysctl), without giving other tasks a chance to run.
#
# The panic can be used in combination with panic_timeout,
# to cause the system to reboot automatically after a
# lockup has been detected. This feature is useful for
# high-availability systems that have uptime guarantees and
# where a lockup must be resolved ASAP.
#
# Say N if unsure.
#
# Symbol: BOOTPARAM_SOFTLOCKUP_PANIC [=y]
# Type  : bool
# Defined at lib/Kconfig.debug:1032
#   Prompt: Panic (Reboot) On Soft Lockups
#   Depends on: SOFTLOCKUP_DETECTOR [=y]
#   Location:
#     -> Kernel hacking
#       -> Debug Oops, Lockups and Hangs
#         -> Detect Soft Lockups (SOFTLOCKUP_DETECTOR [=y])
#           -> Panic (Reboot) On Soft Lockups (BOOTPARAM_SOFTLOCKUP_PANIC [=y])
#
#nmi_watchdog
#============
#
#This parameter can be used to control the NMI watchdog
#(i.e. the hard lockup detector) on x86 systems.
#
#= =================================
#0 Disable the hard lockup detector.
#1 Enable the hard lockup detector.
#= =================================
#
#The hard lockup detector monitors each CPU for its ability to respond to
#timer interrupts. The mechanism utilizes CPU performance counter registers
#that are programmed to generate Non-Maskable Interrupts (NMIs) periodically
#while a CPU is busy. Hence, the alternative name 'NMI watchdog'.
#
#The NMI watchdog is disabled by default if the kernel is running as a guest
#in a KVM virtual machine. This default can be overridden by adding::
#
#   nmi_watchdog=1
#
#to the guest kernel command line (see
#Documentation/admin-guide/kernel-parameters.rst).
#
kernel.nmi_watchdog = 1

